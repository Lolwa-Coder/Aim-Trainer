{"version":3,"sources":["index.js"],"names":["KeyLight","brightness","color","width","height","intensity","position","lookAt","penumbra","castShadow","FillLight","RimLight","rotation","GroundPlane","receiveShadow","attach","args","BackDrop","Sphere1","useState","count1","setCount1","console","log","white","setWhite","visible","userData","test","Math","random","onClick","transparent","roughness","metalness","App","signIn","setSignIn","countO","setCountO","exit","setExit","bg","setBg","href","className","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.3e080c25.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Canvas } from \"react-three-fiber\";\n\nimport \"./styles.css\";\n\n\nfunction KeyLight({ brightness, color }) {\n  return (\n    <rectAreaLight\n      width={3}\n      height={3}\n      color={color}\n      intensity={20}\n      position={[-2, 0, 5]}\n      lookAt={[0, 0, 0]}\n      penumbra={1}\n      castShadow\n    />\n  );\n}\nfunction FillLight({ brightness, color }) {\n  return (\n    <rectAreaLight\n      width={3}\n      height={3}\n      intensity={20}\n      color={color}\n      position={[2, 1, 4]}\n      lookAt={[0, 0, 0]}\n      penumbra={2}\n      castShadow\n    />\n  );\n}\nfunction RimLight({ brightness, color }) {\n  return (\n    <rectAreaLight\n      width={2}\n      height={2}\n      intensity={20}\n      color={color}\n      position={[1, 4, -2]}\n      rotation={[0, 180, 0]}\n      castShadow\n    />\n  );\n}\nfunction GroundPlane() {\n  return (\n    <mesh receiveShadow rotation={[5, 0, 0]} position={[0, -5, 0]}>\n      <planeBufferGeometry attach=\"geometry\" args={[500, 500]} />\n      <meshStandardMaterial attach=\"material\" color=\"white\" />{\" \"}\n    </mesh>\n  );\n}\nfunction BackDrop() {\n  return (\n    <mesh receiveShadow position={[0, -1, -10]}>\n      <planeBufferGeometry attach=\"geometry\" args={[500, 500]} />\n      <meshStandardMaterial attach=\"material\" color=\"white\" />\n    </mesh>\n  );\n}\n\nfunction Sphere1() {\n  const [count1, setCount1] = useState(0);\n  console.log(count1);\n  const [white, setWhite] = useState(\"red\");\n  const changer = () => {\n    return (\n      \"rgb( \" + (250 - count1 * 5) + \",\" + count1 * 5 + \",\" + count1 * 5 + \")\"\n    );\n  };\n\n  return (\n    <>\n      <mesh\n        visible\n        userData={{ test: \"hello\" }}\n        position={[\n          -1.5 + 3 * Math.random(),\n          -0.5 + 2 * Math.random(),\n          2 - 10 * Math.random()\n        ]}\n        castShadow\n        onClick={() => {\n          setCount1(count1 + 1);\n          setWhite(changer());\n        }}\n      >\n        <sphereGeometry attach=\"geometry\" args={[0.5, 16, 16]} />\n        <meshStandardMaterial\n          attach=\"material\"\n          color={white}\n          transparent\n          roughness={0.1}\n          metalness={0.1}\n        />\n      </mesh>\n    </>\n  );\n}\n\nfunction App() {\n  const [signIn, setSignIn] = useState(false);\n  const [countO, setCountO] = useState(50);\n  const [exit, setExit] = useState(false);\n  const [bg, setBg] = useState(\"white\");\n\n  const changer = () => {\n    return (\n      \"rgb( \" +\n      (50 + countO * 4) +\n      \",\" +\n      (50 + countO * 4) +\n      \",\" +\n      (50 + countO * 4) +\n      \")\"\n    );\n  };\n\n  if (signIn === false)\n    return (\n      <>\n        <h1 onClick={() => setSignIn(true)}>MicroFlix</h1>\n        <h2>\n          {\" \"}\n          shoot 50 bullets and we will guess your rank. ps- it gets darker\n        </h2>\n      </>\n    );\n  else if (exit === true)\n    return (\n      <div>\n        <h4>\n          <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n            Click here to see Ur rank\n          </a>\n        </h4>\n      </div>\n    );\n  else\n    return (\n      <div\n        onClick={() => {\n          setCountO(countO - 1);\n          setBg(changer());\n          if (countO < 2) {\n            setCountO(50);\n            setExit(true);\n          }\n        }}\n      >\n        <h3 className=\"unselectable\">{countO}</h3>\n        <Canvas>\n          <GroundPlane color={bg} />\n          <BackDrop color={bg} />\n          <KeyLight color={bg} />\n          <RimLight color={bg} />\n          <FillLight color={bg} />\n          <Sphere1 />\n        </Canvas>\n      </div>\n    );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}