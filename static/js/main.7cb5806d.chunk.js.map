{"version":3,"sources":["index.js"],"names":["extend","meshline","lines","Array","fill","colors","Fatline","material","useRef","useState","parseInt","length","Math","random","color","ratio","max","width","pos","THREE","points","map","add","clone","getPoints","curve","useFrame","current","uniforms","dashOffset","value","attach","vertices","ref","transparent","depthTest","lineWidth","dashArray","dashRatio","Scene","group","theta","rotation","set","sin","degToRad","_","index","KeyLight","brightness","height","intensity","position","lookAt","penumbra","castShadow","FillLight","RimLight","Title","material-toneMapped","GroundPlane","receiveShadow","args","BackDrop","Sphere1","count1","setCount1","console","log","white","setWhite","visible","userData","test","onClick","roughness","metalness","App","signIn","setSignIn","countO","setCountO","exit","setExit","bg","setBg","style","background","camera","fov","href","className","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.7cb5806d.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport * as THREE from 'three'\nimport ReactDOM from \"react-dom\";\nimport { Canvas, extend, useFrame} from \"react-three-fiber\";\nimport { Text } from '@react-three/drei'\nimport * as meshline from 'threejs-meshline'\n\n\nimport \"./styles.css\";\n\nextend(meshline)\n\nconst numLines = 100\nconst lines = new Array(numLines).fill()\nconst colors = ['#000000']\nfunction Fatline() {\n  const material = useRef()\n  const [color] = useState(() => colors[parseInt(colors.length * Math.random())])\n  const [ratio] = useState(() => 0 + 0.5 * Math.random())\n  const [width] = useState(() => Math.max(0.1, 0.2 * Math.random()))\n  // Calculate wiggly curve\n  const [curve] = useState(() => {\n    let pos = new THREE.Vector3(45 - 90 * Math.random(), 5, 10 - 20 * Math.random())\n    const points = new Array(30).fill().map(() => pos.add(new THREE.Vector3(2 - Math.random() * 4, 4 - Math.random() * 2, 5 - Math.random() * 10)).clone())\n    return new THREE.CatmullRomCurve3(points).getPoints(500)\n  })\n  // Hook into the render loop and decrease the materials dash-offset\n  useFrame(() => (material.current.uniforms.dashOffset.value -= 0.0005))\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={curve} />\n      <meshLineMaterial attach=\"material\" ref={material} transparent depthTest={false} lineWidth={width} color={color} dashArray={0.1} dashRatio={ratio} />\n    </mesh>\n  )\n}\nfunction Scene() {\n  let group = useRef()\n  let theta = 0\n  // Hook into the render loop and rotate the scene a bit\n  useFrame(() => group.current.rotation.set(0, 5 * Math.sin(THREE.Math.degToRad((theta += 0.02))), 0))\n  return (\n    <group ref={group}>\n      {lines.map((_, index) => (\n        <Fatline key={index} />\n      ))}\n    </group>\n  )\n}\n\nfunction KeyLight({ brightness, color }) {\n  return (\n    <rectAreaLight\n      width={3}\n      height={3}\n      color={color}\n      intensity={20}\n      position={[-2, 0, 5]}\n      lookAt={[0, 0, 0]}\n      penumbra={1}\n      castShadow\n    />\n  );\n}\nfunction FillLight({ brightness, color }) {\n  return (\n    <rectAreaLight\n      width={3}\n      height={3}\n      intensity={20}\n      color={color}\n      position={[2, 1, 4]}\n      lookAt={[0, 0, 0]}\n      penumbra={2}\n      castShadow\n    />\n  );\n}\nfunction RimLight({ brightness, color }) {\n  return (\n    <rectAreaLight\n      width={2}\n      height={2}\n      intensity={20}\n      color={color}\n      position={[1, 4, -2]}\n      rotation={[0, 180, 0]}\n      castShadow\n    />\n  );\n}\nfunction Title() {\n  return <Text material-toneMapped={false}>MicroFlix</Text>\n}\nfunction GroundPlane() {\n  return (\n    <mesh receiveShadow rotation={[5, 0, 0]} position={[0, -5, 0]}>\n      <planeBufferGeometry attach=\"geometry\" args={[500, 500]} />\n      <meshStandardMaterial attach=\"material\" color=\"white\" />{\" \"}\n    </mesh>\n  );\n}\nfunction BackDrop() {\n  return (\n    <mesh receiveShadow position={[0, -1, -10]}>\n      <planeBufferGeometry attach=\"geometry\" args={[500, 500]} />\n      <meshStandardMaterial attach=\"material\" color=\"white\" />\n    </mesh>\n  );\n}\n\nfunction Sphere1() {\n  const [count1, setCount1] = useState(0);\n  console.log(count1);\n  const [white, setWhite] = useState(\"red\");\n  const changer = () => {\n    return (\n      \"rgb( \" + (250 - count1 * 5) + \",\" + count1 * 5 + \",\" + count1 * 5 + \")\"\n    );\n  };\n\n  return (\n    <>\n      <mesh\n        visible\n        userData={{ test: \"hello\" }}\n        position={[\n          -1.5 + 3 * Math.random(),\n          -0.5 + 2 * Math.random(),\n          2 - 10 * Math.random()\n        ]}\n        castShadow\n        onClick={() => {\n          setCount1(count1 + 1);\n          setWhite(changer());\n        }}\n      >\n        <sphereGeometry attach=\"geometry\" args={[0.5, 16, 16]} />\n        <meshStandardMaterial\n          attach=\"material\"\n          color={white}\n          transparent\n          roughness={0.1}\n          metalness={0.1}\n        />\n      </mesh>\n    </>\n  );\n}\n\nfunction App() {\n  const [signIn, setSignIn] = useState(false);\n  const [countO, setCountO] = useState(50);\n  const [exit, setExit] = useState(false);\n  const [bg, setBg] = useState(\"white\");\n\n  const changer = () => {\n    return (\n      \"rgb( \" +\n      (50 + countO * 4) +\n      \",\" +\n      (50 + countO * 4) +\n      \",\" +\n      (50 + countO * 4) +\n      \")\"\n    );\n  };\n\n  if (signIn === false)\n    return (\n      <><Canvas style={{ background: '#324444' }} camera={{ position: [0, 50, 10], fov: 75 }}><Scene /></Canvas>\n        <h1 onClick={() => setSignIn(true)}>MicroFlix</h1>\n        <h2>\n          {\" \"}\n          shoot 50 bullets and we will guess your rank. ps- it gets darker\n        </h2>\n      </>\n    );\n  else if (exit === true)\n    return (\n      <div>\n        <h4>\n          <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">\n            Click here to see Ur rank\n          </a>\n        </h4>\n      </div>\n    );\n  else\n    return (\n      <div\n        onClick={() => {\n          setCountO(countO - 1);\n          setBg(changer());\n          if (countO < 2) {\n            setCountO(50);\n            setExit(true);\n          }\n        }}\n      >\n        <h3 className=\"unselectable\">{countO}</h3>\n        <Canvas >\n          \n          <Title />\n          <GroundPlane color={bg} />\n          <BackDrop color={bg} />\n          <KeyLight color={bg} />\n          <RimLight color={bg} />\n          <FillLight color={bg} />\n          <Sphere1 />\n        </Canvas>\n      </div>\n    );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}